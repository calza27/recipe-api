openapi: 3.0.0
x-explorer-enabled: false
security: []
info:
  title: Recipe API
  description: "A REST interface to manage Recipe related operations"
  contact: {}
  version: "1.0"
servers:
  - url: https://6maydcc8u3.execute-api.ap-southeast-2.amazonaws.com/api
    description: Recipe dev server
x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: "400"
    responseTemplates:
      application/json: '{ "errors": [ { "detail": "$context.error.message: $context.error.validationErrorString" } ] }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Cache-Control: "'no-store'"
      gatewayresponse.header.Content-Security-Policy: "'frame-ancestors 'none''"
      gatewayresponse.header.Strict-Transport-Security: "'max-age=31536000; includeSubDomains'"
      gatewayresponse.header.X-FRAME-OPTIONS: "'DENY'"
      gatewayresponse.header.X-Content-Type-Options: "'nosniff'"
  ACCESS_DENIED:
    statusCode: "403"
    responseTemplates:
      application/json: '{ "errors": [ { "detail": "Not authorized to access this resource" } ] }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Cache-Control: "'no-store'"
      gatewayresponse.header.Content-Security-Policy: "'frame-ancestors 'none''"
      gatewayresponse.header.Strict-Transport-Security: "'max-age=31536000; includeSubDomains'"
      gatewayresponse.header.X-FRAME-OPTIONS: "'DENY'"
      gatewayresponse.header.X-Content-Type-Options: "'nosniff'"
paths:
  /recipe/upload:
    put:
      summary: Upload a PDF to the S3 bucket
      description: "Upload a PDF to the S3 bucket"
      operationId: export
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "201":
          description: "Success"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/recipe-api-processor/function/upload/arn}}:live/invocations"
  /recipe/list:
    get:
      summary: List the versions of the recipe file
      description: "List the versions of the recipe file"
      operationId: list
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/fileData"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/recipe-api-processor/function/list/arn}}:live/invocations"
  /recipe/getFileUrl/{version}:
    get:
      summary: Get the URL to access the file for the given file name
      description: "Get the URL to access the file for the given file name"
      operationId: getFileUrl
      parameters:
        - name: version
          in: path
          description: the version of the file to get the access URL for
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: string
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/recipe-api-processor/function/getFileUrl/arn}}:live/invocations"
components:
  responses:
    NoContent:
      description: "No Content"
    BadRequest:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    NotFound:
      description: "Not Found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    Conflict:
      description: "Conflict"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    Unauthorized:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    Forbidden:
      description: "Forbidden"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    InternalServerError:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
  schemas:
    error:
      type: object
      properties:
        status:
          type: integer
          description: the HTTP status code
          example: 400
        message:
          type: string
          description: a human readable message
          example: "An error occured during [x]"
    fileData:
      title: File Data
      type: object
      properties:
        Version:
          type: number
        Date:
          type: string
        PdfFile:
          type: string